components:
  requestBodies:
    CreateTasksRequest:
      content:
        application/json:
          schema:
            properties:
              dates:
                $ref: '#/components/schemas/Dates'
              description:
                minLength: 1
                type: string
              priority:
                $ref: '#/components/schemas/Priority'
      description: Request used for creating a task.
      required: true
    SearchTasksRequest:
      content:
        application/json:
          schema:
            nullable: true
            properties:
              description:
                minLength: 1
                nullable: true
                type: string
              from:
                default: 0
                format: int64
                type: integer
              is_done:
                default: false
                nullable: true
                type: boolean
              priority:
                $ref: '#/components/schemas/Priority'
              size:
                default: 10
                format: int64
                type: integer
      description: Request used for searching a task.
      required: true
    UpdateTasksRequest:
      content:
        application/json:
          schema:
            properties:
              dates:
                $ref: '#/components/schemas/Dates'
              description:
                minLength: 1
                type: string
              is_done:
                default: false
                type: boolean
              priority:
                $ref: '#/components/schemas/Priority'
      description: Request used for updating a task.
      required: true
  responses:
    CreateTasksResponse:
      content:
        application/json:
          schema:
            properties:
              task:
                $ref: '#/components/schemas/Task'
      description: Response returned back after creating tasks.
    ErrorResponse:
      content:
        application/json:
          schema:
            properties:
              error:
                type: string
      description: Response when errors happen.
    ReadTasksResponse:
      content:
        application/json:
          schema:
            properties:
              task:
                $ref: '#/components/schemas/Task'
      description: Response returned back after searching one task.
    SearchTasksResponse:
      content:
        application/json:
          schema:
            properties:
              tasks:
                items:
                  $ref: '#/components/schemas/Task'
                type: array
              total:
                format: int64
                type: integer
      description: Response returned back after searching for any task.
  schemas:
    Dates:
      properties:
        due:
          format: date-time
          nullable: true
          type: string
        start:
          format: date-time
          nullable: true
          type: string
      type: object
    Priority:
      default: none
      enum:
      - none
      - low
      - medium
      - high
      type: string
    Task:
      properties:
        dates:
          $ref: '#/components/schemas/Dates'
        description:
          type: string
        id:
          format: uuid
          type: string
        is_done:
          type: boolean
        priority:
          $ref: '#/components/schemas/Priority'
      type: object
info:
  contact:
    url: https://github.com/MarioCarrion/todo-api-microservice-example
  description: REST APIs used for interacting with the ToDo Service
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: ToDo API
  version: 0.0.0
openapi: 3.0.0
paths:
  /search/tasks:
    post:
      operationId: SearchTask
      requestBody:
        $ref: '#/components/requestBodies/SearchTasksRequest'
      responses:
        "200":
          $ref: '#/components/responses/SearchTasksResponse'
        "400":
          $ref: '#/components/responses/ErrorResponse'
        "500":
          $ref: '#/components/responses/ErrorResponse'
  /tasks:
    post:
      operationId: CreateTask
      requestBody:
        $ref: '#/components/requestBodies/CreateTasksRequest'
      responses:
        "201":
          $ref: '#/components/responses/CreateTasksResponse'
        "400":
          $ref: '#/components/responses/ErrorResponse'
        "500":
          $ref: '#/components/responses/ErrorResponse'
  /tasks/{taskId}:
    delete:
      operationId: DeleteTask
      parameters:
      - in: path
        name: taskId
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          description: Task updated
        "404":
          description: Task not found
        "500":
          $ref: '#/components/responses/ErrorResponse'
    get:
      operationId: ReadTask
      parameters:
      - in: path
        name: taskId
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          $ref: '#/components/responses/ReadTasksResponse'
        "404":
          description: Task not found
        "500":
          $ref: '#/components/responses/ErrorResponse'
    put:
      operationId: UpdateTask
      parameters:
      - in: path
        name: taskId
        required: true
        schema:
          format: uuid
          type: string
      requestBody:
        $ref: '#/components/requestBodies/UpdateTasksRequest'
      responses:
        "200":
          description: Task updated
        "400":
          $ref: '#/components/responses/ErrorResponse'
        "404":
          description: Task not found
        "500":
          $ref: '#/components/responses/ErrorResponse'
servers:
- description: Local development
  url: http://127.0.0.1:9234
