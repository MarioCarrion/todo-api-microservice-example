//go:build go1.22

// Package rest provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package rest

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	googleuuid "github.com/google/uuid"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Defines values for Priority.
const (
	PriorityHigh   Priority = "high"
	PriorityLow    Priority = "low"
	PriorityMedium Priority = "medium"
	PriorityNone   Priority = "none"
)

// Dates defines model for Dates.
type Dates struct {
	Due   *time.Time `json:"due"`
	Start *time.Time `json:"start"`
}

// Priority defines model for Priority.
type Priority string

// Task defines model for Task.
type Task struct {
	Dates       *Dates          `json:"dates,omitempty"`
	Description string          `json:"description"`
	ID          googleuuid.UUID `json:"id"`
	IsDone      *bool           `json:"isDone,omitempty"`
	Priority    *Priority       `json:"priority,omitempty"`
}

// CreateTasksResponse defines model for CreateTasksResponse.
type CreateTasksResponse struct {
	Task Task `json:"task"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error string `json:"error"`
}

// ReadTasksResponse defines model for ReadTasksResponse.
type ReadTasksResponse struct {
	Task *Task `json:"task,omitempty"`
}

// SearchTasksResponse defines model for SearchTasksResponse.
type SearchTasksResponse struct {
	Tasks *[]Task `json:"tasks,omitempty"`
	Total *int64  `json:"total,omitempty"`
}

// CreateTasksRequest defines model for CreateTasksRequest.
type CreateTasksRequest struct {
	Dates       *Dates    `json:"dates,omitempty"`
	Description string    `json:"description"`
	Priority    *Priority `json:"priority,omitempty"`
}

// SearchTasksRequest defines model for SearchTasksRequest.
type SearchTasksRequest struct {
	Description *string   `json:"description"`
	From        int64     `json:"from"`
	IsDone      *bool     `json:"isDone"`
	Priority    *Priority `json:"priority,omitempty"`
	Size        int64     `json:"size"`
}

// UpdateTasksRequest defines model for UpdateTasksRequest.
type UpdateTasksRequest struct {
	Dates       *Dates    `json:"dates,omitempty"`
	Description *string   `json:"description,omitempty"`
	IsDone      *bool     `json:"isDone,omitempty"`
	Priority    *Priority `json:"priority,omitempty"`
}

// CreateTaskJSONBody defines parameters for CreateTask.
type CreateTaskJSONBody struct {
	Dates       *Dates    `json:"dates,omitempty"`
	Description string    `json:"description"`
	Priority    *Priority `json:"priority,omitempty"`
}

// SearchTaskJSONBody defines parameters for SearchTask.
type SearchTaskJSONBody struct {
	Description *string   `json:"description"`
	From        int64     `json:"from"`
	IsDone      *bool     `json:"isDone"`
	Priority    *Priority `json:"priority,omitempty"`
	Size        int64     `json:"size"`
}

// UpdateTaskJSONBody defines parameters for UpdateTask.
type UpdateTaskJSONBody struct {
	Dates       *Dates    `json:"dates,omitempty"`
	Description *string   `json:"description,omitempty"`
	IsDone      *bool     `json:"isDone,omitempty"`
	Priority    *Priority `json:"priority,omitempty"`
}

// CreateTaskJSONRequestBody defines body for CreateTask for application/json ContentType.
type CreateTaskJSONRequestBody CreateTaskJSONBody

// SearchTaskJSONRequestBody defines body for SearchTask for application/json ContentType.
type SearchTaskJSONRequestBody SearchTaskJSONBody

// UpdateTaskJSONRequestBody defines body for UpdateTask for application/json ContentType.
type UpdateTaskJSONRequestBody UpdateTaskJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /tasks)
	CreateTask(w http.ResponseWriter, r *http.Request)

	// (POST /tasks/search)
	SearchTask(w http.ResponseWriter, r *http.Request)

	// (DELETE /tasks/{id})
	DeleteTask(w http.ResponseWriter, r *http.Request, id googleuuid.UUID)

	// (GET /tasks/{id})
	ReadTask(w http.ResponseWriter, r *http.Request, id googleuuid.UUID)

	// (PUT /tasks/{id})
	UpdateTask(w http.ResponseWriter, r *http.Request, id googleuuid.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTask(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SearchTask operation middleware
func (siw *ServerInterfaceWrapper) SearchTask(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SearchTask(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteTask operation middleware
func (siw *ServerInterfaceWrapper) DeleteTask(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id googleuuid.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteTask(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ReadTask operation middleware
func (siw *ServerInterfaceWrapper) ReadTask(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id googleuuid.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReadTask(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateTask operation middleware
func (siw *ServerInterfaceWrapper) UpdateTask(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id googleuuid.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTask(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/tasks", wrapper.CreateTask)
	m.HandleFunc("POST "+options.BaseURL+"/tasks/search", wrapper.SearchTask)
	m.HandleFunc("DELETE "+options.BaseURL+"/tasks/{id}", wrapper.DeleteTask)
	m.HandleFunc("GET "+options.BaseURL+"/tasks/{id}", wrapper.ReadTask)
	m.HandleFunc("PUT "+options.BaseURL+"/tasks/{id}", wrapper.UpdateTask)

	return m
}

type CreateTasksResponseJSONResponse struct {
	Task Task `json:"task"`
}

type ErrorResponseJSONResponse struct {
	Error string `json:"error"`
}

type ReadTasksResponseJSONResponse struct {
	Task *Task `json:"task,omitempty"`
}

type SearchTasksResponseJSONResponse struct {
	Tasks *[]Task `json:"tasks,omitempty"`
	Total *int64  `json:"total,omitempty"`
}

type CreateTaskRequestObject struct {
	Body *CreateTaskJSONRequestBody
}

type CreateTaskResponseObject interface {
	VisitCreateTaskResponse(w http.ResponseWriter) error
}

type CreateTask201JSONResponse struct {
	CreateTasksResponseJSONResponse
}

func (response CreateTask201JSONResponse) VisitCreateTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateTask400JSONResponse struct{ ErrorResponseJSONResponse }

func (response CreateTask400JSONResponse) VisitCreateTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateTask500JSONResponse struct {
	Error string `json:"error"`
}

func (response CreateTask500JSONResponse) VisitCreateTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type SearchTaskRequestObject struct {
	Body *SearchTaskJSONRequestBody
}

type SearchTaskResponseObject interface {
	VisitSearchTaskResponse(w http.ResponseWriter) error
}

type SearchTask200JSONResponse struct {
	SearchTasksResponseJSONResponse
}

func (response SearchTask200JSONResponse) VisitSearchTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SearchTask400JSONResponse struct{ ErrorResponseJSONResponse }

func (response SearchTask400JSONResponse) VisitSearchTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type SearchTask500JSONResponse struct {
	Error string `json:"error"`
}

func (response SearchTask500JSONResponse) VisitSearchTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTaskRequestObject struct {
	Id googleuuid.UUID `json:"id"`
}

type DeleteTaskResponseObject interface {
	VisitDeleteTaskResponse(w http.ResponseWriter) error
}

type DeleteTask200Response struct {
}

func (response DeleteTask200Response) VisitDeleteTaskResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteTask404Response struct {
}

func (response DeleteTask404Response) VisitDeleteTaskResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type DeleteTask500JSONResponse struct{ ErrorResponseJSONResponse }

func (response DeleteTask500JSONResponse) VisitDeleteTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ReadTaskRequestObject struct {
	Id googleuuid.UUID `json:"id"`
}

type ReadTaskResponseObject interface {
	VisitReadTaskResponse(w http.ResponseWriter) error
}

type ReadTask200JSONResponse struct{ ReadTasksResponseJSONResponse }

func (response ReadTask200JSONResponse) VisitReadTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ReadTask404Response struct {
}

func (response ReadTask404Response) VisitReadTaskResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type ReadTask500JSONResponse struct{ ErrorResponseJSONResponse }

func (response ReadTask500JSONResponse) VisitReadTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTaskRequestObject struct {
	Id   googleuuid.UUID `json:"id"`
	Body *UpdateTaskJSONRequestBody
}

type UpdateTaskResponseObject interface {
	VisitUpdateTaskResponse(w http.ResponseWriter) error
}

type UpdateTask200Response struct {
}

func (response UpdateTask200Response) VisitUpdateTaskResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type UpdateTask400JSONResponse struct{ ErrorResponseJSONResponse }

func (response UpdateTask400JSONResponse) VisitUpdateTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTask404Response struct {
}

func (response UpdateTask404Response) VisitUpdateTaskResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type UpdateTask500JSONResponse struct {
	Error string `json:"error"`
}

func (response UpdateTask500JSONResponse) VisitUpdateTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (POST /tasks)
	CreateTask(ctx context.Context, request CreateTaskRequestObject) (CreateTaskResponseObject, error)

	// (POST /tasks/search)
	SearchTask(ctx context.Context, request SearchTaskRequestObject) (SearchTaskResponseObject, error)

	// (DELETE /tasks/{id})
	DeleteTask(ctx context.Context, request DeleteTaskRequestObject) (DeleteTaskResponseObject, error)

	// (GET /tasks/{id})
	ReadTask(ctx context.Context, request ReadTaskRequestObject) (ReadTaskResponseObject, error)

	// (PUT /tasks/{id})
	UpdateTask(ctx context.Context, request UpdateTaskRequestObject) (UpdateTaskResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// CreateTask operation middleware
func (sh *strictHandler) CreateTask(w http.ResponseWriter, r *http.Request) {
	var request CreateTaskRequestObject

	var body CreateTaskJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateTask(ctx, request.(CreateTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateTask")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateTaskResponseObject); ok {
		if err := validResponse.VisitCreateTaskResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// SearchTask operation middleware
func (sh *strictHandler) SearchTask(w http.ResponseWriter, r *http.Request) {
	var request SearchTaskRequestObject

	var body SearchTaskJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.SearchTask(ctx, request.(SearchTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SearchTask")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SearchTaskResponseObject); ok {
		if err := validResponse.VisitSearchTaskResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteTask operation middleware
func (sh *strictHandler) DeleteTask(w http.ResponseWriter, r *http.Request, id googleuuid.UUID) {
	var request DeleteTaskRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTask(ctx, request.(DeleteTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTask")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteTaskResponseObject); ok {
		if err := validResponse.VisitDeleteTaskResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ReadTask operation middleware
func (sh *strictHandler) ReadTask(w http.ResponseWriter, r *http.Request, id googleuuid.UUID) {
	var request ReadTaskRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ReadTask(ctx, request.(ReadTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ReadTask")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ReadTaskResponseObject); ok {
		if err := validResponse.VisitReadTaskResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateTask operation middleware
func (sh *strictHandler) UpdateTask(w http.ResponseWriter, r *http.Request, id googleuuid.UUID) {
	var request UpdateTaskRequestObject

	request.Id = id

	var body UpdateTaskJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateTask(ctx, request.(UpdateTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateTask")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(UpdateTaskResponseObject); ok {
		if err := validResponse.VisitUpdateTaskResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
